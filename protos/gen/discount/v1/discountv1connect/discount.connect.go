// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: discount/v1/discount.proto

package discountv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/arvan-challenge/protos/gen/discount/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// DiscountServiceName is the fully-qualified name of the DiscountService service.
	DiscountServiceName = "discount.v1.DiscountService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DiscountServiceDiscountsProcedure is the fully-qualified name of the DiscountService's Discounts
	// RPC.
	DiscountServiceDiscountsProcedure = "/discount.v1.DiscountService/Discounts"
)

// DiscountServiceClient is a client for the discount.v1.DiscountService service.
type DiscountServiceClient interface {
	Discounts(context.Context, *connect.Request[v1.DiscountsRequest]) (*connect.Response[v1.DiscountsResponse], error)
}

// NewDiscountServiceClient constructs a client for the discount.v1.DiscountService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDiscountServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DiscountServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &discountServiceClient{
		discounts: connect.NewClient[v1.DiscountsRequest, v1.DiscountsResponse](
			httpClient,
			baseURL+DiscountServiceDiscountsProcedure,
			opts...,
		),
	}
}

// discountServiceClient implements DiscountServiceClient.
type discountServiceClient struct {
	discounts *connect.Client[v1.DiscountsRequest, v1.DiscountsResponse]
}

// Discounts calls discount.v1.DiscountService.Discounts.
func (c *discountServiceClient) Discounts(ctx context.Context, req *connect.Request[v1.DiscountsRequest]) (*connect.Response[v1.DiscountsResponse], error) {
	return c.discounts.CallUnary(ctx, req)
}

// DiscountServiceHandler is an implementation of the discount.v1.DiscountService service.
type DiscountServiceHandler interface {
	Discounts(context.Context, *connect.Request[v1.DiscountsRequest]) (*connect.Response[v1.DiscountsResponse], error)
}

// NewDiscountServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDiscountServiceHandler(svc DiscountServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	discountServiceDiscountsHandler := connect.NewUnaryHandler(
		DiscountServiceDiscountsProcedure,
		svc.Discounts,
		opts...,
	)
	return "/discount.v1.DiscountService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DiscountServiceDiscountsProcedure:
			discountServiceDiscountsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDiscountServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDiscountServiceHandler struct{}

func (UnimplementedDiscountServiceHandler) Discounts(context.Context, *connect.Request[v1.DiscountsRequest]) (*connect.Response[v1.DiscountsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("discount.v1.DiscountService.Discounts is not implemented"))
}

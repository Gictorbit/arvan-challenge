// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: wallet/v1/wallet.proto

package walletv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Wallet with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Wallet) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Wallet with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in WalletMultiError, or nil if none found.
func (m *Wallet) ValidateAll() error {
	return m.validate(true)
}

func (m *Wallet) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Balance

	// no validation rules for Unit

	if len(errors) > 0 {
		return WalletMultiError(errors)
	}

	return nil
}

// WalletMultiError is an error wrapping multiple validation errors returned by
// Wallet.ValidateAll() if the designated constraints aren't met.
type WalletMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WalletMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WalletMultiError) AllErrors() []error { return m }

// WalletValidationError is the validation error returned by Wallet.Validate if
// the designated constraints aren't met.
type WalletValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WalletValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WalletValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WalletValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WalletValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WalletValidationError) ErrorName() string { return "WalletValidationError" }

// Error satisfies the builtin error interface
func (e WalletValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWallet.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WalletValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WalletValidationError{}

// Validate checks the field values on MyBalanceRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MyBalanceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MyBalanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MyBalanceRequestMultiError, or nil if none found.
func (m *MyBalanceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MyBalanceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return MyBalanceRequestMultiError(errors)
	}

	return nil
}

// MyBalanceRequestMultiError is an error wrapping multiple validation errors
// returned by MyBalanceRequest.ValidateAll() if the designated constraints
// aren't met.
type MyBalanceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MyBalanceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MyBalanceRequestMultiError) AllErrors() []error { return m }

// MyBalanceRequestValidationError is the validation error returned by
// MyBalanceRequest.Validate if the designated constraints aren't met.
type MyBalanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MyBalanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MyBalanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MyBalanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MyBalanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MyBalanceRequestValidationError) ErrorName() string { return "MyBalanceRequestValidationError" }

// Error satisfies the builtin error interface
func (e MyBalanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMyBalanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MyBalanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MyBalanceRequestValidationError{}

// Validate checks the field values on MyBalanceResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MyBalanceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MyBalanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MyBalanceResponseMultiError, or nil if none found.
func (m *MyBalanceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MyBalanceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MyBalanceResponseMultiError(errors)
	}

	return nil
}

// MyBalanceResponseMultiError is an error wrapping multiple validation errors
// returned by MyBalanceResponse.ValidateAll() if the designated constraints
// aren't met.
type MyBalanceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MyBalanceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MyBalanceResponseMultiError) AllErrors() []error { return m }

// MyBalanceResponseValidationError is the validation error returned by
// MyBalanceResponse.Validate if the designated constraints aren't met.
type MyBalanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MyBalanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MyBalanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MyBalanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MyBalanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MyBalanceResponseValidationError) ErrorName() string {
	return "MyBalanceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MyBalanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMyBalanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MyBalanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MyBalanceResponseValidationError{}

// Validate checks the field values on TransactionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TransactionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransactionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransactionsRequestMultiError, or nil if none found.
func (m *TransactionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TransactionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TransactionsRequestMultiError(errors)
	}

	return nil
}

// TransactionsRequestMultiError is an error wrapping multiple validation
// errors returned by TransactionsRequest.ValidateAll() if the designated
// constraints aren't met.
type TransactionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransactionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransactionsRequestMultiError) AllErrors() []error { return m }

// TransactionsRequestValidationError is the validation error returned by
// TransactionsRequest.Validate if the designated constraints aren't met.
type TransactionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransactionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransactionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransactionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransactionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransactionsRequestValidationError) ErrorName() string {
	return "TransactionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TransactionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransactionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransactionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransactionsRequestValidationError{}

// Validate checks the field values on TransactionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TransactionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransactionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransactionsResponseMultiError, or nil if none found.
func (m *TransactionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TransactionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TransactionsResponseMultiError(errors)
	}

	return nil
}

// TransactionsResponseMultiError is an error wrapping multiple validation
// errors returned by TransactionsResponse.ValidateAll() if the designated
// constraints aren't met.
type TransactionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransactionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransactionsResponseMultiError) AllErrors() []error { return m }

// TransactionsResponseValidationError is the validation error returned by
// TransactionsResponse.Validate if the designated constraints aren't met.
type TransactionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransactionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransactionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransactionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransactionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransactionsResponseValidationError) ErrorName() string {
	return "TransactionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TransactionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransactionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransactionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransactionsResponseValidationError{}

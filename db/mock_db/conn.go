// Code generated by MockGen. DO NOT EDIT.
// Source: conn.go

// Package mock_db is a generated GoMock package.
package mock_db

import (
	reflect "reflect"

	squirrel "github.com/Masterminds/squirrel"
	gomock "github.com/golang/mock/gomock"
	pgxpool "github.com/jackc/pgx/v5/pgxpool"
)

// MockArvanDBConn is a mock of ArvanDBConn interface.
type MockArvanDBConn struct {
	ctrl     *gomock.Controller
	recorder *MockArvanDBConnMockRecorder
}

// MockArvanDBConnMockRecorder is the mock recorder for MockArvanDBConn.
type MockArvanDBConnMockRecorder struct {
	mock *MockArvanDBConn
}

// NewMockArvanDBConn creates a new mock instance.
func NewMockArvanDBConn(ctrl *gomock.Controller) *MockArvanDBConn {
	mock := &MockArvanDBConn{ctrl: ctrl}
	mock.recorder = &MockArvanDBConnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArvanDBConn) EXPECT() *MockArvanDBConnMockRecorder {
	return m.recorder
}

// GetPgConn mocks base method.
func (m *MockArvanDBConn) GetPgConn() *pgxpool.Pool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPgConn")
	ret0, _ := ret[0].(*pgxpool.Pool)
	return ret0
}

// GetPgConn indicates an expected call of GetPgConn.
func (mr *MockArvanDBConnMockRecorder) GetPgConn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPgConn", reflect.TypeOf((*MockArvanDBConn)(nil).GetPgConn))
}

// GetSQLBuilder mocks base method.
func (m *MockArvanDBConn) GetSQLBuilder() squirrel.StatementBuilderType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSQLBuilder")
	ret0, _ := ret[0].(squirrel.StatementBuilderType)
	return ret0
}

// GetSQLBuilder indicates an expected call of GetSQLBuilder.
func (mr *MockArvanDBConnMockRecorder) GetSQLBuilder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSQLBuilder", reflect.TypeOf((*MockArvanDBConn)(nil).GetSQLBuilder))
}
